#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        touch_behavior_1: touch1 {
            compatible = "zmk,behavior-momentary";
            label = "TouchKey1";
            bindings = <&kp A>;
        };

        touch_behavior_2: touch2 {
            compatible = "zmk,behavior-momentary";
            label = "TouchKey2";
            bindings = <&kp B>;
        };

        touch_behavior_3: touch3 {
            compatible = "zmk,behavior-momentary";
            label = "TouchKey3";
            bindings = <&mo 1>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MINIMAL {
            bindings = <
&kp Q      &kp W         &kp E         &kp R        &kp T                                                        &kp Y      &kp U  &kp I      &kp O      &kp P
&kp A      &kp S         &kp D         &kp F        &kp G        &kp EQUAL                            &kp H      &kp J      &kp K  &kp L      &kp ENTER  &kp BSPC
&kp LSHFT  &kp Z         &kp X         &kp C        &kp V        &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS    &kp B      &kp N      &kp M  &kp COMMA  &kp DOT    &lt 4 TAB
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_WIN  &lt 1 SPACE  &lt 2 SPACE  &mkp RCLK                            &mkp LCLK  &kp SPACE                               &lt 5 RIGHT_WIN
            >;

            sensor-bindings = <&inc_dec_kp LG(MINUS) LG(LS(NUMBER_6))>;
            label = "MINIMAL";
        };

        ESC123 {
            bindings = <
&kp ESC             &kp NUMBER_1         &kp NUMBER_2  &kp NUMBER_3  &trans                                        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS
&trans              &kp NUMBER_4         &kp NUMBER_5  &kp NUMBER_6  &trans        &trans    &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &bt BT_SEL 0          &bt BT_SEL 1  &bt BT_SEL 2     &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS
&trans              &kp NUMBER_7         &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans    &trans                &trans                &trans                &trans        &trans           &none
&kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &trans        &trans        &trans        &trans    &trans                &trans                                                                     &none
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        ARROW {
            bindings = <
&kp LS(EXCL)    &kp LS(AT)      &kp LS(POUND)   &kp LS(DLLR)    &kp LS(PRCNT)                                              &kp CARET         &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LANGUAGE_1  &kp LANGUAGE_2  &kp LANGUAGE_3  &kp UP_ARROW    &none            &kp LC(LA(KP_NUMBER_0))    &none          &none             &kp MINUS      &kp EQUAL     &kp LBKT              &kp RBKT
&kp LSHFT       &none           &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp EQUAL                  &trans         &none             &kp COMMA      &kp DOT       &kp SEMI              &kp APOS
&trans          &trans          &trans          &trans          &trans           &trans                     &kp LESS_THAN  &kp GREATER_THAN                                                     &kp SLASH
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NONE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        FCPX {
            bindings = <
&kp LS(TAB)           &kp LA(T)  &kp LC(LA(M))  &kp LC(LA(R))  &trans                             &kp LG(B)             &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)  &kp LC(MINUS)        &kp LS(SPACE)
&kp LC(LG(NUMBER_1))  &trans     &trans         &trans         &trans  &trans    &kp LG(Z)        &kp LS(LG(Z))         &kp LS(LEFT_ARROW)    &kp LS(RIGHT_ARROW)    &kp LS(LG(R))        &kp LG(BACKSPACE)
&kp LSHFT             &trans     &trans         &trans         &trans  &trans    &kp LC(LS(TAB))  &kp LG(NUMBER_1)      &kp LG(NUMBER_2)      &kp LC(LEFT_ARROW)     &kp LC(RIGHT_ARROW)  &trans
&trans                &trans     &trans         &trans         &trans  &trans    &kp LG(MINUS)    &kp LS(LG(NUMBER_6))                                                                    &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&trans          &trans  &trans  &trans  &trans                    &none            &none             &none           &trans          &kp BACKSPACE
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK        &mkp RCLK         &none           &mmv MOVE_UP    &none
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans    &none   &msc MOVE_X(20)  &msc MOVE_X(-20)  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &trans                                                             &trans
            >;

            sensor-bindings = <&scroll_up_down>, <&scroll_up_down>;
        };
    };
};
